SET VERIFY OFF;
SET DATEFORMAT DMY;
SET SERVEROUTPUT ON; 

------------------------------------ TABLES ------------------------------------

CREATE TABLE TB_ROLES(
         ID_ROLE NUMERIC(1) NOT NULL,
       USER_ROLE VARCHAR2(25) NOT NULL,
    
      CONSTRAINT TB_ROLES_PK
     PRIMARY KEY (ID_ROLE)
);

CREATE TABLE TB_USERS(
        USERNAME VARCHAR2(50) NOT NULL,
            PASS VARCHAR2(50) NOT NULL,
         ID_ROLE NUMERIC(1) NOT NULL,
      FIRST_NAME VARCHAR2(50) NOT NULL,
       LAST_NAME VARCHAR2(50) NOT NULL,
   
      CONSTRAINT TB_USERS_PK
     PRIMARY KEY (USERNAME),
  
      CONSTRAINT TB_USERS_TB_ROLES_FK
     FOREIGN KEY (ID_ROLE)
      REFERENCES TB_ROLES(ID_ROLE) 
);

CREATE TABLE TB_TYPETICKET(
         ID_TYPE NUMERIC(1) NOT NULL,
      TYPETICKET VARCHAR2(25) NOT NULL,

      CONSTRAINT PK_TYPETICKET
     PRIMARY KEY (ID_TYPE)
);

CREATE TABLE TB_TYPEVEHICLE(
         ID_TYPE NUMERIC(1) NOT NULL,
     TYPEVEHICLE VARCHAR2(25) NOT NULL,
      DAILY_RENT NUMERIC(10) NOT NULL,
    NIGHTLY_RENT NUMERIC(10) NOT NULL,
       DAY_PRICE NUMERIC(10) NOT NULL,
     NIGHT_PRICE NUMERIC(10) NOT NULL,

      CONSTRAINT PK_TYPEVEHICLE
     PRIMARY KEY (ID_TYPE)
);

CREATE TABLE TB_PARTNERS(
      ID_VEHICLE VARCHAR2(50) NOT NULL,
  
      CONSTRAINT TB_PARTNERS_PK
     PRIMARY KEY (ID_VEHICLE)
);

CREATE TABLE TB_BLACKLIST(
      ID_VEHICLE VARCHAR2(50) NOT NULL,
  
      CONSTRAINT TB_BLACKLIST_PK
     PRIMARY KEY (ID_VEHICLE)
);

CREATE TABLE TB_VEHICLES(
      ID_VEHICLE VARCHAR2(50) NOT NULL,
  ID_TYPEVEHICLE NUMERIC(1) NOT NULL,
   ID_TYPETICKET NUMERIC(1) NOT NULL,
       ENTRYDATE VARCHAR2(50) NOT NULL,
       ENTRYTIME VARCHAR2(50) NOT NULL,
        USERNAME VARCHAR2(50) NOT NULL,
  
      CONSTRAINT PK_ID_VEHICLE
     PRIMARY KEY (ID_VEHICLE),

      CONSTRAINT FK_ID_TYPEVEHICLE
     FOREIGN KEY (ID_TYPEVEHICLE)
      REFERENCES TB_TYPEVEHICLE(ID_TYPE),

      CONSTRAINT FK_ID_TYPETICKET
     FOREIGN KEY (ID_TYPETICKET)
      REFERENCES TB_TYPETICKET(ID_TYPE),
    	
      CONSTRAINT FK_USERNAME
     FOREIGN KEY (USERNAME)
      REFERENCES TB_USERS(USERNAME)
);

CREATE TABLE TB_CONFIGURATION(
      ID_PARKING VARCHAR2(100) NOT NULL,
    PARKING_NAME VARCHAR2(100) NOT NULL,
       TELEPHONE VARCHAR2(50) NOT NULL,
        FREETIME NUMERIC(5) NOT NULL,
     START_DAILY VARCHAR2(8) NOT NULL,
       END_DAILY VARCHAR2(8) NOT NULL,
   START_NIGHTLY VARCHAR2(8) NOT NULL,
     END_NIGHTLY VARCHAR2(8) NOT NULL,   
    
      CONSTRAINT PK_ID_PARKING
     PRIMARY KEY (ID_PARKING)
);

CREATE TABLE TB_HISTORY(
      ID_HISTORY NUMBER NOT NULL,
        USERNAME VARCHAR2(50) NOT NULL,
     DESCRIPTION VARCHAR2(500) NOT NULL,
     DATAENTERED VARCHAR2(100) DEFAULT 'NO APLICA' NOT NULL,
          V_DATE VARCHAR2(10) NOT NULL,
          V_TIME VARCHAR2(11) NOT NULL,

      CONSTRAINT TB_HISTORY_PK
     PRIMARY KEY (ID_HISTORY)
);

----------------------------------- SEQUENCE -----------------------------------

CREATE SEQUENCE SEQ_TB_HISTORY
INCREMENT BY 1
START WITH 1
NOMINVALUE
NOMAXVALUE;

----------------------------------- INSERTS ------------------------------------

INSERT INTO TB_ROLES VALUES (1,'XAaN4xw4eNjH+xWMPcJ2wQ==');
INSERT INTO TB_ROLES VALUES (2,'jcHsEraTfgc=');
INSERT INTO TB_ROLES VALUES (2,'jcHsEraTfgc=');

INSERT INTO TB_USERS VALUES ('5P3iSFsr24E=','5P3iSFsr24E=',1,'5P3iSFsr24E=','5P3iSFsr24E=');
INSERT INTO TB_USERS VALUES ('SES9L+QysE8=','SES9L+QysE8=',2,'SES9L+QysE8=','SES9L+QysE8=');

INSERT INTO TB_TYPEVEHICLE VALUES (1,'8y1NZGLw2Wk=',6000,4000,1200,800);
INSERT INTO TB_TYPEVEHICLE VALUES (2,'9WRBRgEw67DJ2NYA2Yho7Q==',5000,3000,900,600);
INSERT INTO TB_TYPEVEHICLE VALUES (3,'5BGlEnERcMADx1/7qa9TyQ==',2500,2000,500,400);

INSERT INTO TB_TYPETICKET VALUES (1,'IACjaJvExRcD59aadV3geg==');
INSERT INTO TB_TYPETICKET VALUES (2,'rCBeANzrknzjAvSBLXDW0w==');
INSERT INTO TB_TYPETICKET VALUES (3,'fSZAZ5Ui1Wg=');

---------------------------- PACKAGES -> FUNCTIONS -----------------------------

CREATE OR REPLACE PACKAGE FUNC
AS
  FUNCTION FN_LOGIN01(V_USER IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_LOGIN02(V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_GETROLE(V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_GETPLATESTATUS(V_ID IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION FN_VehicleExist(V_ID_VEHICLE IN VARCHAR2) RETURN NUMERIC;
END FUNC;

CREATE OR REPLACE PACKAGE BODY FUNC
AS
  FUNCTION FN_LOGIN01(V_USER IN VARCHAR2)
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_USERS WHERE USERNAME IN (V_USER);
    RETURN EXIST;
  END FN_LOGIN01;  
                                   ----------

  FUNCTION FN_LOGIN02( V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2 )
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_USERS WHERE USERNAME IN (V_USER) AND PASS IN (V_PASSWORD);
    RETURN EXIST;
  END FN_LOGIN02;
  
                                   ----------
  
  FUNCTION FN_GETROLE( V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2 )
  RETURN NUMERIC
  AS
    ID_ROLE NUMERIC(1);
  BEGIN
    SELECT ID_ROLE INTO ID_ROLE FROM TB_USERS WHERE USERNAME IN (V_USER) AND PASS IN (V_PASSWORD);
    RETURN ID_ROLE;
  END FN_GETROLE;
  
                                   ----------
  
  FUNCTION FN_VehicleExist(V_ID_VEHICLE IN VARCHAR2)
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_VEHICLES WHERE ID_VEHICLE IN (V_ID_VEHICLE);
    RETURN EXIST;
  END FN_VehicleExist;  

                                   ----------
    
  FUNCTION FN_GETPLATESTATUS(V_ID IN VARCHAR2)
  RETURN VARCHAR2
  AS
    EXIST NUMERIC(1);
    ISLOCKED NUMERIC(1);
    ISPARTNER NUMERIC(1);
    STATUS VARCHAR2(7);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_VEHICLES WHERE ID_VEHICLE = V_ID;
    SELECT COUNT(*) INTO ISLOCKED FROM TB_BLACKLIST WHERE ID_VEHICLE = V_ID;
    SELECT COUNT(*) INTO ISPARTNER FROM TB_PARTNERS WHERE ID_VEHICLE = V_ID;
       
    IF EXIST = 1 THEN    
      STATUS := 'EXIST';
    ELSIF ISLOCKED = 1 THEN
      STATUS := 'LOCKED';
    ELSIF ISPARTNER = 1 THEN
      STATUS := 'PARTNER';
    ELSIF EXIST = 0 AND ISLOCKED = 0 AND ISPARTNER = 0 THEN
      STATUS := 'OK';
    END IF;    
    RETURN STATUS;
  END FN_GETPLATESTATUS;  
END FUNC;

------------------------ PACKAGES -> STORED PROCEDURES -------------------------

CREATE OR REPLACE PACKAGE STPR
AS  
  PROCEDURE SP_NEWVEHICLE(V_ID_VEHICLE IN VARCHAR2, V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DATE IN VARCHAR2, V_TIME IN VARCHAR2, V_USERNAME IN VARCHAR2, STATUS OUT VARCHAR2);
  PROCEDURE SP_HISTORY(V_USERNAME IN VARCHAR2, V_DESCRIPTION IN VARCHAR2, V_DATAENTERED IN VARCHAR2);
  PROCEDURE SP_GetWidgetsInfo(V_USERS OUT NUMERIC, V_PARTNERS OUT NUMERIC, V_BLACKLIST OUT NUMERIC, V_VEHICLES OUT NUMERIC);
  PROCEDURE SP_GetVehiclesCount(V_TRUCKS OUT NUMERIC, V_CARS OUT NUMERIC, V_MOTORCYCLES OUT NUMERIC);
  PROCEDURE SP_GetConfigTicket(V_ID OUT VARCHAR2, V_NAME OUT VARCHAR2, V_TELEPHONE OUT VARCHAR2);
  PROCEDURE SP_GetTicketInfo(V_ID IN VARCHAR2, V_EntryDate OUT VARCHAR2, V_EntryTime OUT VARCHAR2, V_DepartureDate OUT VARCHAR2, V_DepartureTime OUT VARCHAR2, V_StayTime OUT VARCHAR2, V_TypeVehicle OUT VARCHAR2, V_TypeTicket OUT VARCHAR2, V_Margin OUT VARCHAR2);
END STPR;
/*V_RoundedTime OUT VARCHAR2,*/
CREATE OR REPLACE PACKAGE BODY STPR
AS
  PROCEDURE SP_NEWVEHICLE(V_ID_VEHICLE IN VARCHAR2, V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DATE IN VARCHAR2, V_TIME IN VARCHAR2, V_USERNAME IN VARCHAR2, STATUS OUT VARCHAR2)
  AS
  BEGIN
      SELECT FUNC.FN_GETPLATESTATUS(V_ID_VEHICLE) INTO STATUS FROM DUAL; 
      IF STATUS = 'PARTNER' THEN 
        INSERT INTO TB_VEHICLES VALUES (V_ID_VEHICLE, (SELECT ID_TYPE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = V_TYPEVEHICLE), (SELECT ID_TYPE FROM TB_TYPETICKET WHERE TYPETICKET = 'fSZAZ5Ui1Wg='), V_DATE, V_TIME, V_USERNAME);  
      ELSIF STATUS = 'OK' THEN
        INSERT INTO TB_VEHICLES VALUES (V_ID_VEHICLE, (SELECT ID_TYPE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = V_TYPEVEHICLE), (SELECT ID_TYPE FROM TB_TYPETICKET WHERE TYPETICKET = V_TYPETICKET), V_DATE, V_TIME, V_USERNAME);  
      END IF;
  END SP_NEWVEHICLE;

                                   ----------
    
  PROCEDURE SP_HISTORY(V_USERNAME IN VARCHAR2, V_DESCRIPTION IN VARCHAR2, V_DATAENTERED IN VARCHAR2)
  AS
    V_DATE VARCHAR2(10);
    V_TIME VARCHAR2(11);  
  BEGIN
    SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY') INTO V_DATE FROM DUAL; 
    SELECT LOWER(TO_CHAR(SYSDATE,'HH:MI:SS AM')) INTO V_TIME FROM DUAL;
    
    INSERT INTO TB_HISTORY VALUES (SEQ_TB_HISTORY.NEXTVAL, V_USERNAME, V_DESCRIPTION, V_DATAENTERED, V_DATE, V_TIME);  
  END SP_HISTORY;

                                   ----------
    
  PROCEDURE SP_GetWidgetsInfo(V_USERS OUT NUMERIC, V_PARTNERS OUT NUMERIC, V_BLACKLIST OUT NUMERIC, V_VEHICLES OUT NUMERIC)
  AS
  BEGIN
      SELECT COUNT(*) INTO V_USERS FROM TB_USERS; 
      SELECT COUNT(*) INTO V_PARTNERS FROM TB_PARTNERS; 
      SELECT COUNT(*) INTO V_BLACKLIST FROM TB_BLACKLIST; 
      SELECT COUNT(*) INTO V_VEHICLES FROM TB_VEHICLES; 
  END SP_GetWidgetsInfo;

                                   ----------
    
  PROCEDURE SP_GetVehiclesCount(V_TRUCKS OUT NUMERIC, V_CARS OUT NUMERIC, V_MOTORCYCLES OUT NUMERIC)
  AS
  BEGIN
      SELECT COUNT(*) INTO V_TRUCKS FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPE AND TV.TYPEVEHICLE = '8y1NZGLw2Wk=';
      SELECT COUNT(*) INTO V_CARS FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPE AND TV.TYPEVEHICLE = '9WRBRgEw67DJ2NYA2Yho7Q==';
      SELECT COUNT(*) INTO V_MOTORCYCLES FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPE AND TV.TYPEVEHICLE = '5BGlEnERcMADx1/7qa9TyQ==';
  END SP_GetVehiclesCount;

                                   ----------
    
  PROCEDURE SP_GetConfigTicket(V_ID OUT VARCHAR2, V_NAME OUT VARCHAR2, V_TELEPHONE OUT VARCHAR2)
  AS
  BEGIN
      SELECT ID_PARKING, PARKING_NAME, TELEPHONE INTO V_ID, V_NAME, V_TELEPHONE FROM TB_CONFIGURATION;
  END SP_GetConfigTicket;

                                   ----------
    
--  PROCEDURE SP_GetTicketInfoa(V_ID IN VARCHAR2, V_TypeVehicle OUT VARCHAR2, V_TypeTicket OUT VARCHAR2, V_EntryDate OUT VARCHAR2, V_EntryTime OUT VARCHAR2, V_Margin OUT VARCHAR2)
--  AS
  --BEGIN
    --  SELECT TB_TV.TYPEVEHICLE, TB_TT.TYPETICKET, TB_V.ENTRYDATE, TB_V.ENTRYTIME INTO V_TypeVehicle, V_TypeTicket, V_EntryDate, V_EntryTime FROM TB_VEHICLES TB_V, TB_TYPEVEHICLE TB_TV, TB_TYPETICKET TB_TT WHERE TB_V.ID_TYPEVEHICLE = TB_TV.ID_TYPE AND TB_V.ID_TYPETICKET = TB_TT.ID_TYPE AND TB_V.ID_VEHICLE = V_ID;
  --END SP_GetTicketInfoa;

                                   ----------

  PROCEDURE SP_GetTicketInfo(V_ID IN VARCHAR2, V_EntryDate OUT VARCHAR2, V_EntryTime OUT VARCHAR2, V_DepartureDate OUT VARCHAR2, V_DepartureTime OUT VARCHAR2, V_StayTime OUT VARCHAR2, V_TypeVehicle OUT VARCHAR2, V_TypeTicket OUT VARCHAR2, /*V_RoundedTime OUT VARCHAR2,*/ V_Margin OUT VARCHAR2)
  AS
  BEGIN
    SELECT TB_TV.TYPEVEHICLE, TB_TT.TYPETICKET, TB_V.ENTRYDATE, TB_V.ENTRYTIME INTO V_TypeVehicle, V_TypeTicket, V_EntryDate, V_EntryTime FROM TB_VEHICLES TB_V, TB_TYPEVEHICLE TB_TV, TB_TYPETICKET TB_TT WHERE TB_V.ID_TYPEVEHICLE = TB_TV.ID_TYPE AND TB_V.ID_TYPETICKET = TB_TT.ID_TYPE AND TB_V.ID_VEHICLE = V_ID;
    SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY') INTO V_DepartureDate FROM DUAL;
    SELECT TO_CHAR(SYSDATE,'HH24:MI:SS') INTO V_DepartureTime FROM DUAL;
    SELECT TO_CHAR((TO_CHAR(HOURS, '00')+(TO_CHAR(DAYS, '00')*24)),'00') || ':' || TO_CHAR(MINUTES, '00') || ':' || TO_CHAR(SECONDS, '00') INTO V_StayTime 
    FROM (
      SELECT EntryDateTime,
             DepartureDateTime,
             TRUNC((DepartureDateTime - EntryDateTime)) DAYS,
             TRUNC(MOD((DepartureDateTime - EntryDateTime) * 24, 24)) HOURS,
             TRUNC(MOD((DepartureDateTime - EntryDateTime) * (60 * 24), 60)) MINUTES,
             TRUNC(MOD((DepartureDateTime - EntryDateTime) * (60 * 60 * 24), 60)) SECONDS
             FROM (
               SELECT TO_DATE((V_EntryDate || ' ' || V_EntryTime), 'DD.MM.YYYY HH24:MI:SS') EntryDateTime,
                      TO_DATE((V_DepartureDate || ' ' || V_DepartureTime), 'DD.MM.YYYY HH24:MI:SS') DepartureDateTime
                      FROM DUAL
                )
    );
    SELECT FreeTime INTO V_MARGIN FROM TB_CONFIGURATION;
  END SP_GetTicketInfo;
END STPR;








CREATE OR REPLACE PROCEDURE SP(V_EntryTime IN VARCHAR2, V_DepartureTime IN VARCHAR2)
AS
  TOTAL VARCHAR2(200);
  HOURS NUMERIC;
  MINUTES NUMERIC;
  SECONDS NUMERIC;
  RES1 NUMERIC;
  RES2 NUMERIC;
BEGIN
  RES1 := 0;
  SELECT SUBSTR(V_EntryTime,0, 2) INTO HOURS FROM DUAL;
  SELECT SUBSTR(V_EntryTime,4, 2) INTO MINUTES FROM DUAL;
  SELECT SUBSTR(V_EntryTime,7, 2) INTO SECONDS FROM DUAL;
    
  LOOP
    SECONDS := SECONDS + 1;
    
    IF SECONDS = 60 THEN
      MINUTES := MINUTES + 1;
      SECONDS := 0;
    END IF;
    
    IF MINUTES = 60 THEN
      HOURS := HOURS + 1;
      MINUTES := 0;
    END IF;

    IF HOURS < 10 THEN
      TOTAL := '0' || HOURS || ':';
    ELSE
      TOTAL := HOURS || ':';
    END IF;

    IF MINUTES < 10 THEN
      TOTAL := TOTAL || '0' || MINUTES || ':';
    ELSE
      TOTAL := TOTAL || MINUTES || ':';
    END IF;

    IF SECONDS < 10 THEN
      TOTAL := TOTAL || '0' || SECONDS;
    ELSE
      TOTAL := TOTAL || SECONDS;
    END IF;

    RES1 :=  RES1 + 1;    
    dbms_output.put_line('TOTAL: ' || TOTAL || ' SEGUNDOS: ' || RES1);

    EXIT WHEN TOTAL = V_DepartureTime;
  END LOOP;
END SP;

DECLARE
BEGIN
    SP('19:59:00','20:10:00');
END;








DECLARE
  V_ID VARCHAR2(200);
  V_RES VARCHAR2(200);
BEGIN
  V_ID := '24/06/2018 16:45:18';

  CL101(
    V_ID => V_ID,
    V_RES => V_RES
  );
  DBMS_OUTPUT.PUT_LINE('V_RES = ' || V_RES); 
  :V_RES := V_RES;
END;

        

      
--    V_StayTime OUT VARCHAR2 V_RoundedTime OUT VARCHAR2, V_Margin OUT VARCHAR2)



SELECT TO_CHAR(SYSDATE,'DAY-MON-YEAR') FROM DUAL;

SELECT TO_CHAR(SYSDATE,'HH24:MI:SS AM') FROM DUAL;

    SELECT TO_CHAR((TO_CHAR(HOURS, '00')+(TO_CHAR(DAYS, '00')*24)),'00') || ':' || TO_CHAR(MINUTES, '00') || ':' || TO_CHAR(SECONDS, '00') 
    FROM (
      SELECT EntryDateTime,
             DepartureDateTime,
             TRUNC((DepartureDateTime - EntryDateTime)) DAYS,
             TRUNC(MOD((DepartureDateTime - EntryDateTime) * 24, 24)) HOURS,
             TRUNC(MOD((DepartureDateTime - EntryDateTime) * (60 * 24), 60)) MINUTES,
             TRUNC(MOD((DepartureDateTime - EntryDateTime) * (60 * 60 * 24), 60)) SECONDS
             FROM (
               SELECT TO_DATE(('24/06/2018' || ' ' || '16:45:18'), 'DD.MM.YYYY HH24:MI:SS') EntryDateTime,
                      TO_DATE(('25/06/2018' || ' ' || '01:37:30'), 'DD.MM.YYYY HH24:MI:SS') DepartureDateTime
                      FROM DUAL
                )
    )




DECLARE
BEGIN
    SP('v7','v8');
END;

8gYv6ba59u4=

select * from tb_vehicleS

SELECT * FROM TB_configuration
delete from tb_vehicles
commit

UPDATE TB_VEHICLES SET ENTRYDATE = '24/06/2018', ENTRYTIME = '16:45:18'