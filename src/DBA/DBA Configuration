SET VERIFY OFF;
SET DATEFORMAT DMY;
SET SERVEROUTPUT ON; 

------------------------------------ TABLES ------------------------------------

CREATE TABLE TB_ROLES(
         ID_ROLE NUMERIC(1) NOT NULL,
       USER_ROLE VARCHAR2(25) NOT NULL,
    
      CONSTRAINT TB_ROLES_PK
     PRIMARY KEY (ID_ROLE)
);

CREATE TABLE TB_USERS(
        USERNAME VARCHAR2(50) NOT NULL,
            PASS VARCHAR2(50) NOT NULL,
         ID_ROLE NUMERIC(1) NOT NULL,
      FIRST_NAME VARCHAR2(50) NOT NULL,
       LAST_NAME VARCHAR2(50) NOT NULL,
   
      CONSTRAINT TB_USERS_PK
     PRIMARY KEY (USERNAME),
  
      CONSTRAINT TB_USERS_TB_ROLES_FK
     FOREIGN KEY (ID_ROLE)
      REFERENCES TB_ROLES(ID_ROLE) 
);

CREATE TABLE TB_TYPETICKET(
         ID_TYPE NUMERIC(1) NOT NULL,
      TYPETICKET VARCHAR2(25) NOT NULL,

      CONSTRAINT PK_TYPETICKET
     PRIMARY KEY (ID_TYPE)
);

CREATE TABLE TB_TYPEVEHICLE(
         ID_TYPE NUMERIC(1) NOT NULL,
     TYPEVEHICLE VARCHAR2(25) NOT NULL,
      DAILY_RENT NUMERIC(10) NOT NULL,
    NIGHTLY_RENT NUMERIC(10) NOT NULL,
       DAY_PRICE NUMERIC(10) NOT NULL,
     NIGHT_PRICE NUMERIC(10) NOT NULL,

      CONSTRAINT PK_TYPEVEHICLE
     PRIMARY KEY (ID_TYPE)
);

CREATE TABLE TB_PARTNERS(
      ID_VEHICLE VARCHAR2(50) NOT NULL,
  
      CONSTRAINT TB_PARTNERS_PK
     PRIMARY KEY (ID_VEHICLE)
);

CREATE TABLE TB_BLACKLIST(
      ID_VEHICLE VARCHAR2(50) NOT NULL,
  
      CONSTRAINT TB_BLACKLIST_PK
     PRIMARY KEY (ID_VEHICLE)
);

CREATE TABLE TB_VEHICLES(
      ID_VEHICLE VARCHAR2(50) NOT NULL,
  ID_TYPEVEHICLE NUMERIC(1) NOT NULL,
   ID_TYPETICKET NUMERIC(1) NOT NULL,
       ENTRYDATE VARCHAR2(50) NOT NULL,
       ENTRYTIME VARCHAR2(50) NOT NULL,
        USERNAME VARCHAR2(50) NOT NULL,
  
      CONSTRAINT PK_ID_VEHICLE
     PRIMARY KEY (ID_VEHICLE),

      CONSTRAINT FK_ID_TYPEVEHICLE
     FOREIGN KEY (ID_TYPEVEHICLE)
      REFERENCES TB_TYPEVEHICLE(ID_TYPE),

      CONSTRAINT FK_ID_TYPETICKET
     FOREIGN KEY (ID_TYPETICKET)
      REFERENCES TB_TYPETICKET(ID_TYPE),
    	
      CONSTRAINT FK_USERNAME
     FOREIGN KEY (USERNAME)
      REFERENCES TB_USERS(USERNAME)
);

CREATE TABLE TB_CONFIGURATION(
      ID_PARKING VARCHAR2(100) NOT NULL,
    PARKING_NAME VARCHAR2(100) NOT NULL,
       TELEPHONE VARCHAR2(50) NOT NULL,
        FREETIME NUMERIC(5) NOT NULL,
     START_DAILY VARCHAR2(8) NOT NULL,
       END_DAILY VARCHAR2(8) NOT NULL,
   START_NIGHTLY VARCHAR2(8) NOT NULL,
     END_NIGHTLY VARCHAR2(8) NOT NULL,   
    
      CONSTRAINT PK_ID_PARKING
     PRIMARY KEY (ID_PARKING)
);

CREATE TABLE TB_HISTORY(
      ID_HISTORY NUMBER NOT NULL,
        USERNAME VARCHAR2(50) NOT NULL,
     DESCRIPTION VARCHAR2(500) NOT NULL,
     DATAENTERED VARCHAR2(100) DEFAULT 'NO APLICA' NOT NULL,
          V_DATE VARCHAR2(10) NOT NULL,
          V_TIME VARCHAR2(11) NOT NULL,

      CONSTRAINT TB_HISTORY_PK
     PRIMARY KEY (ID_HISTORY)
);

----------------------------------- SEQUENCE -----------------------------------

CREATE SEQUENCE SEQ_TB_HISTORY
INCREMENT BY 1
START WITH 1
NOMINVALUE
NOMAXVALUE;

----------------------------------- INSERTS ------------------------------------

INSERT INTO TB_ROLES VALUES (1,'XAaN4xw4eNjH+xWMPcJ2wQ==');
INSERT INTO TB_ROLES VALUES (2,'jcHsEraTfgc=');
INSERT INTO TB_ROLES VALUES (2,'jcHsEraTfgc=');

INSERT INTO TB_USERS VALUES ('5P3iSFsr24E=','5P3iSFsr24E=',1,'5P3iSFsr24E=','5P3iSFsr24E=');
INSERT INTO TB_USERS VALUES ('SES9L+QysE8=','SES9L+QysE8=',2,'SES9L+QysE8=','SES9L+QysE8=');

INSERT INTO TB_TYPEVEHICLE VALUES (1,'8y1NZGLw2Wk=',6000,4000,1200,800);
INSERT INTO TB_TYPEVEHICLE VALUES (2,'9WRBRgEw67DJ2NYA2Yho7Q==',5000,3000,900,600);
INSERT INTO TB_TYPEVEHICLE VALUES (3,'5BGlEnERcMADx1/7qa9TyQ==',2500,2000,500,400);

INSERT INTO TB_TYPETICKET VALUES (1,'IACjaJvExRcD59aadV3geg==');
INSERT INTO TB_TYPETICKET VALUES (2,'rCBeANzrknzjAvSBLXDW0w==');
INSERT INTO TB_TYPETICKET VALUES (3,'fSZAZ5Ui1Wg=');

---------------------------- PACKAGES -> FUNCTIONS -----------------------------

CREATE OR REPLACE PACKAGE FUNC
AS
  FUNCTION FN_LOGIN01 (V_USER IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_LOGIN02 (V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_GETROLE (V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_VEHICLEEXIST (V_ID_VEHICLE IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_GETPLATESTATUS (V_ID_VEHICLE IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION FN_ISLEAPYEAR (V_YEAR IN NUMERIC) RETURN NUMBER;
  FUNCTION FN_GETLIMITOFDAYS (V_MONTHS IN NUMERIC, V_YEARS IN NUMERIC) RETURN NUMERIC;
  FUNCTION FN_GETTIMEFORMAT (V_HOURS IN NUMERIC, V_MINUTES IN NUMERIC, V_SECONDS IN NUMERIC) RETURN VARCHAR2;
  FUNCTION FN_GETDATEFORMAT (V_DAYS IN NUMERIC, V_MONTHS IN NUMERIC, V_YEARS IN NUMERIC) RETURN VARCHAR2;
  FUNCTION FN_CONVERTTIMETOSECONDS (V_ENTRYTIME IN VARCHAR2)  RETURN NUMERIC;
  FUNCTION FN_CONVERTSECONDSTOTIME (V_SECONDS IN NUMERIC) RETURN VARCHAR2;
  FUNCTION FN_CALCPAYMENT (V_HOURS IN NUMERIC, V_MINUTES IN NUMERIC, V_PRICE IN NUMERIC) RETURN NUMERIC;
  FUNCTION FN_PAYMENT (V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DAILY IN VARCHAR2, V_NIGHTLY IN VARCHAR2) RETURN NUMERIC;
END FUNC;

CREATE OR REPLACE PACKAGE BODY FUNC
AS
  FUNCTION FN_LOGIN01 (V_USER IN VARCHAR2)
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_USERS WHERE USERNAME = V_USER;
    RETURN EXIST;
  END FN_LOGIN01;  
                                   ----------

  FUNCTION FN_LOGIN02 (V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2)
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_USERS WHERE USERNAME = V_USER AND PASS = V_PASSWORD;
    RETURN EXIST;
  END FN_LOGIN02;
  
                                   ----------
  
  FUNCTION FN_GETROLE (V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2)
  RETURN NUMERIC
  AS
    ID_ROLE NUMERIC(1);
  BEGIN
    SELECT ID_ROLE INTO ID_ROLE FROM TB_USERS WHERE USERNAME = V_USER AND PASS = V_PASSWORD;
    RETURN ID_ROLE;
  END FN_GETROLE;
  
                                   ----------
  
  FUNCTION FN_VehicleExist (V_ID_VEHICLE IN VARCHAR2)
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_VEHICLES WHERE ID_VEHICLE = V_ID_VEHICLE;
    RETURN EXIST;
  END FN_VehicleExist;  

                                   ----------
    
  FUNCTION FN_GETPLATESTATUS (V_ID_VEHICLE IN VARCHAR2)
  RETURN VARCHAR2
  AS
    EXIST NUMERIC(1);
    ISLOCKED NUMERIC(1);
    ISPARTNER NUMERIC(1);
    STATUS VARCHAR2(7);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_VEHICLES WHERE ID_VEHICLE = V_ID_VEHICLE;
    SELECT COUNT(*) INTO ISLOCKED FROM TB_BLACKLIST WHERE ID_VEHICLE = V_ID_VEHICLE;
    SELECT COUNT(*) INTO ISPARTNER FROM TB_PARTNERS WHERE ID_VEHICLE = V_ID_VEHICLE;
       
    IF EXIST = 1 THEN    
      STATUS := 'EXIST';
    ELSIF ISLOCKED = 1 THEN
      STATUS := 'LOCKED';
    ELSIF ISPARTNER = 1 THEN
      STATUS := 'PARTNER';
    ELSIF EXIST = 0 AND ISLOCKED = 0 AND ISPARTNER = 0 THEN
      STATUS := 'OK';
    END IF;    
    RETURN STATUS;
  END FN_GETPLATESTATUS;  

                                   ----------
    
  FUNCTION FN_ISLEAPYEAR (V_YEAR IN NUMERIC)
  RETURN NUMBER
  AS
    RES NUMBER(1,0) := 0;
  BEGIN
    IF V_YEAR MOD 4 = 0 AND (V_YEAR MOD 100 <> 0 OR V_YEAR MOD 400 = 0) THEN
      RES := 1;
    END IF;
    RETURN RES;
  END FN_ISLEAPYEAR;

                                   ----------

  FUNCTION FN_GETLIMITOFDAYS (V_MONTHS IN NUMERIC, V_YEARS IN NUMERIC)
  RETURN NUMERIC
  AS
    RES NUMERIC := 0;
    ISLEAPYEAR NUMERIC := 0;
  BEGIN
    IF V_MONTHS = 2 THEN
      SELECT FUNC.FN_ISLEAPYEAR(V_YEARS) INTO ISLEAPYEAR FROM DUAL;
      IF ISLEAPYEAR = 1 THEN
        RES := 29;
      ELSE
        RES := 28;
      END IF;
    ELSIF V_MONTHS = 4 THEN
      RES := 30;
    ELSIF V_MONTHS = 6 THEN
      RES := 30;
    ELSIF V_MONTHS = 9 THEN
      RES := 30;
    ELSIF V_MONTHS = 11 THEN
      RES := 30;
    ELSE
      RES := 31;
    END IF;
    RETURN RES;
  END FN_GETLIMITOFDAYS;
  
                                   ----------

  FUNCTION FN_GETTIMEFORMAT (V_HOURS IN NUMERIC, V_MINUTES IN NUMERIC, V_SECONDS IN NUMERIC)
  RETURN VARCHAR2
  AS
    RES VARCHAR2(50);
  BEGIN
    IF V_HOURS < 10 THEN
      RES := '0' || V_HOURS || ':';
    ELSE
      RES := V_HOURS || ':';
    END IF;

    IF V_MINUTES < 10 THEN
      RES := RES || '0' || V_MINUTES || ':';
    ELSE
      RES := RES || V_MINUTES || ':';
    END IF;
  
    IF V_SECONDS < 10 THEN
      RES := RES || '0' || V_SECONDS;
    ELSE
      RES := RES || V_SECONDS;
    END IF;

    RETURN RES;
  END FN_GETTIMEFORMAT;

                                 ----------

  FUNCTION FN_GETDATEFORMAT (V_DAYS IN NUMERIC, V_MONTHS IN NUMERIC, V_YEARS IN NUMERIC)
  RETURN VARCHAR2
  AS
    RES VARCHAR2(10);
  BEGIN
    IF V_DAYS < 10 THEN
      RES := '0' || V_DAYS || '/';
    ELSE
      RES := V_DAYS || '/';
    END IF;

    IF V_MONTHS < 10 THEN
      RES := RES || '0' || V_MONTHS || '/';
    ELSE
      RES := RES || V_MONTHS || '/';
    END IF;
  
    RES := RES || V_YEARS;
    RETURN RES;
  END FN_GETDATEFORMAT;

                                 ----------

  FUNCTION FN_CONVERTTIMETOSECONDS (V_ENTRYTIME IN VARCHAR2) 
  RETURN NUMERIC
  AS
    /* -------------------------------- TIME -------------------------------- */
    HOURS NUMERIC;
    MINUTES NUMERIC;
    SECONDS NUMERIC;

    /* ------------------------------- RESULT ------------------------------- */
    RES NUMERIC;
  BEGIN
    /* ------------------------------ GET TIME ------------------------------ */
    SELECT SUBSTR(V_ENTRYTIME,0, 2) INTO HOURS FROM DUAL;
    SELECT SUBSTR(V_ENTRYTIME,4, 2) INTO MINUTES FROM DUAL;
    SELECT SUBSTR(V_ENTRYTIME,7, 2) INTO SECONDS FROM DUAL;

    RES := (HOURS * 3600) + (MINUTES * 60) + SECONDS;
    RETURN RES;
  END FN_CONVERTTIMETOSECONDS;

                                 ----------
  
  FUNCTION FN_CONVERTSECONDSTOTIME (V_SECONDS IN NUMERIC)
  RETURN VARCHAR2
  AS
    /* ------------------------------- RESULT ------------------------------- */
    RES VARCHAR2(100);
  BEGIN
    SELECT 
      TO_CHAR(TRUNC(V_SECONDS/3600),'FM9900') || ':' ||
      TO_CHAR(TRUNC(MOD(V_SECONDS,3600)/60),'FM00') || ':' ||
      TO_CHAR(MOD(V_SECONDS,60),'FM00') INTO RES
    FROM DUAL;
    RETURN RES;
  END FN_CONVERTSECONDSTOTIME;

                                 ----------
  
  FUNCTION FN_CALCPAYMENT (V_HOURS IN NUMERIC, V_MINUTES IN NUMERIC, V_PRICE IN NUMERIC)
  RETURN NUMERIC
  AS
    RES NUMERIC := 0;
    MARGIN NUMERIC;
  BEGIN
    SELECT FREETIME INTO MARGIN FROM TB_CONFIGURATION;

    IF V_HOURS = 0 THEN
      IF V_MINUTES >= MARGIN THEN
        RES := V_PRICE;
      ELSE
        RES := 0;
      END IF;
    ELSIF V_HOURS >= 1 THEN
      RES := V_PRICE * V_HOURS;
      IF V_MINUTES >= MARGIN AND V_MINUTES <= 30 THEN
        RES := RES + (V_PRICE / 2);
      ELSIF V_MINUTES >= MARGIN AND V_MINUTES >= 30 THEN
        RES := RES + V_PRICE;
      END IF;
    END IF;
    RETURN RES;
  END FN_CALCPAYMENT;

                                 ----------
  
  FUNCTION FN_PAYMENT (V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DAILY IN VARCHAR2, V_NIGHTLY IN VARCHAR2)
  RETURN NUMERIC
  AS
    RES NUMERIC := 0;

    /* ------------------------------- TIME --------------------------------- */
    D_HOURS NUMERIC;
    D_MINUTES NUMERIC;
    D_SECONDS NUMERIC;

    N_HOURS NUMERIC;
    N_MINUTES NUMERIC;
    N_SECONDS NUMERIC;

    DAY_PRICE NUMERIC;
    NIGHT_PRICE NUMERIC;
    TOTAL NUMERIC;
  BEGIN
  
    /* ------------------------------ GET TIME ------------------------------ */
    SELECT TO_NUMBER(SUBSTR(V_DAILY,0, 2)) INTO D_HOURS FROM DUAL;
    SELECT TO_NUMBER(SUBSTR(V_DAILY,4, 2)) INTO D_MINUTES FROM DUAL;
    SELECT TO_NUMBER(SUBSTR(V_DAILY,7, 2)) INTO D_SECONDS FROM DUAL;
  
    SELECT TO_NUMBER(SUBSTR(V_NIGHTLY,0, 2)) INTO N_HOURS FROM DUAL;
    SELECT TO_NUMBER(SUBSTR(V_NIGHTLY,4, 2)) INTO N_MINUTES FROM DUAL;
    SELECT TO_NUMBER(SUBSTR(V_NIGHTLY,7, 2)) INTO N_SECONDS FROM DUAL;

    SELECT DAY_PRICE, NIGHT_PRICE INTO DAY_PRICE, NIGHT_PRICE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = V_TYPEVEHICLE;
  
    IF V_TYPETICKET = 'IACjaJvExRcD59aadV3geg==' THEN
      SELECT FUNC.FN_CALCPAYMENT(D_HOURS, D_MINUTES, DAY_PRICE) INTO RES FROM DUAL;
      TOTAL := RES;
      SELECT FUNC.FN_CALCPAYMENT(N_HOURS, N_MINUTES, NIGHT_PRICE) INTO RES FROM DUAL;
      TOTAL := TOTAL + RES;
    END IF;
    RETURN TOTAL;
  END FN_PAYMENT;
END FUNC;

------------------------ PACKAGES -> STORED PROCEDURES -------------------------

CREATE OR REPLACE PACKAGE STPR
AS    
  PROCEDURE SP_GETWIDGETSINFO (V_USERS OUT NUMERIC, V_PARTNERS OUT NUMERIC, V_BLACKLIST OUT NUMERIC, V_VEHICLES OUT NUMERIC);
  PROCEDURE SP_GETVEHICLESCOUNT (V_TRUCKS OUT NUMERIC, V_CARS OUT NUMERIC, V_MOTORCYCLES OUT NUMERIC);
  PROCEDURE SP_NEWVEHICLE (V_ID_VEHICLE IN VARCHAR2, V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DATE IN VARCHAR2, V_TIME IN VARCHAR2, V_USERNAME IN VARCHAR2, STATUS OUT VARCHAR2);
  PROCEDURE SP_GETCONFIGTICKET (V_ID OUT VARCHAR2, V_NAME OUT VARCHAR2, V_TELEPHONE OUT VARCHAR2);
  PROCEDURE SP_TIMECALCULATOR (V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_ENTRYTIME IN VARCHAR2, V_DEPARTURETIME IN VARCHAR2, V_TOTAL OUT VARCHAR2, V_PAYMENT OUT VARCHAR);
  PROCEDURE SP_TIMECALCULATOR2 (V_ENTRYTIME IN VARCHAR2, V_DEPARTURETIME IN VARCHAR2, V_DAILY OUT VARCHAR2, V_NIGHTLY OUT VARCHAR2, V_TOTAL OUT VARCHAR2 );
  PROCEDURE SP_GETVEHICLEINFO (V_ID_VEHICLE IN VARCHAR2, V_ENTRYDATE OUT VARCHAR2, V_ENTRYTIME OUT VARCHAR2, V_DEPARTUREDATE OUT VARCHAR2, V_DEPARTURETIME OUT VARCHAR2, V_STAYTIME OUT VARCHAR2, V_TYPEVEHICLE OUT VARCHAR2, V_TYPETICKET OUT VARCHAR2, V_MARGIN OUT VARCHAR2, V_ROUNDEDTIME OUT VARCHAR2, V_PAYMENT OUT VARCHAR2);
  PROCEDURE SP_HISTORY (V_USERNAME IN VARCHAR2, V_DESCRIPTION IN VARCHAR2, V_DATAENTERED IN VARCHAR2);
END STPR;

CREATE OR REPLACE PACKAGE BODY STPR
AS
  PROCEDURE SP_GETWIDGETSINFO( V_USERS OUT NUMERIC, V_PARTNERS OUT NUMERIC, V_BLACKLIST OUT NUMERIC, V_VEHICLES OUT NUMERIC )
  AS
  BEGIN
      SELECT COUNT(*) INTO V_USERS FROM TB_USERS; 
      SELECT COUNT(*) INTO V_PARTNERS FROM TB_PARTNERS; 
      SELECT COUNT(*) INTO V_BLACKLIST FROM TB_BLACKLIST; 
      SELECT COUNT(*) INTO V_VEHICLES FROM TB_VEHICLES; 
  END SP_GETWIDGETSINFO;

                                   ----------
    
  PROCEDURE SP_GETVEHICLESCOUNT( V_TRUCKS OUT NUMERIC, V_CARS OUT NUMERIC, V_MOTORCYCLES OUT NUMERIC )
  AS
  BEGIN
      SELECT COUNT(*) INTO V_TRUCKS FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPE AND TV.TYPEVEHICLE = '8y1NZGLw2Wk=';
      SELECT COUNT(*) INTO V_CARS FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPE AND TV.TYPEVEHICLE = '9WRBRgEw67DJ2NYA2Yho7Q==';
      SELECT COUNT(*) INTO V_MOTORCYCLES FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPE AND TV.TYPEVEHICLE = '5BGlEnERcMADx1/7qa9TyQ==';
  END SP_GETVEHICLESCOUNT;

                                   ----------

  PROCEDURE SP_NEWVEHICLE(V_ID_VEHICLE IN VARCHAR2, V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DATE IN VARCHAR2, V_TIME IN VARCHAR2, V_USERNAME IN VARCHAR2, STATUS OUT VARCHAR2)
  AS
  BEGIN
      SELECT FUNC.FN_GETPLATESTATUS(V_ID_VEHICLE) INTO STATUS FROM DUAL; 
      IF STATUS = 'PARTNER' THEN 
        INSERT INTO TB_VEHICLES VALUES (V_ID_VEHICLE, (SELECT ID_TYPE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = V_TYPEVEHICLE), (SELECT ID_TYPE FROM TB_TYPETICKET WHERE TYPETICKET = 'fSZAZ5Ui1Wg='), V_DATE, V_TIME, V_USERNAME);  
      ELSIF STATUS = 'OK' THEN
        INSERT INTO TB_VEHICLES VALUES (V_ID_VEHICLE, (SELECT ID_TYPE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = V_TYPEVEHICLE), (SELECT ID_TYPE FROM TB_TYPETICKET WHERE TYPETICKET = V_TYPETICKET), V_DATE, V_TIME, V_USERNAME);  
      END IF;
  END SP_NEWVEHICLE;

                                   ----------

  PROCEDURE SP_GETCONFIGTICKET(V_ID OUT VARCHAR2, V_NAME OUT VARCHAR2, V_TELEPHONE OUT VARCHAR2)
  AS
  BEGIN
      SELECT ID_PARKING, PARKING_NAME, TELEPHONE INTO V_ID, V_NAME, V_TELEPHONE FROM TB_CONFIGURATION;
  END SP_GETCONFIGTICKET;

                                   ----------

  PROCEDURE SP_TIMECALCULATOR( V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_ENTRYTIME IN VARCHAR2, V_DEPARTURETIME IN VARCHAR2, V_TOTAL OUT VARCHAR2, V_PAYMENT OUT VARCHAR )
  AS 
    /* -------------------------- VALUES IN SECONDS ------------------------- */
    TOTALTIME NUMERIC;
    ENTRYTIME NUMERIC;
    DEPARTURETIME NUMERIC;
  
    /* ------------------------------- TIME --------------------------------- */
    HOURS NUMERIC;
    MINUTES NUMERIC;
    SECONDS NUMERIC;

    /* ----------------------------- COUNTER -------------------------------- */
    DAILY NUMERIC := 0;
    NIGHTLY NUMERIC := 0;
  
    /* ---------------------- COUNTER (DAILY + NIGHLY) ---------------------- */
    TOTAL NUMERIC := 0;
    TEMP_DAILY VARCHAR2(100);
    TEMP_NIGHTLY VARCHAR2(100);
  BEGIN
    /* ----------------------- GET VALUES IN SECONDS ------------------------ */
    SELECT FUNC.FN_CONVERTTIMETOSECONDS(V_ENTRYTIME) INTO ENTRYTIME FROM DUAL;
    SELECT FUNC.FN_CONVERTTIMETOSECONDS(V_DEPARTURETIME) INTO DEPARTURETIME FROM DUAL;

    /* ------------------------------ GET TIME ------------------------------ */
    SELECT TO_NUMBER(SUBSTR(V_ENTRYTIME,0, 2)) INTO HOURS FROM DUAL;
    SELECT TO_NUMBER(SUBSTR(V_ENTRYTIME,4, 2)) INTO MINUTES FROM DUAL;
    SELECT TO_NUMBER(SUBSTR(V_ENTRYTIME,7, 2)) INTO SECONDS FROM DUAL;

    LOOP
      SECONDS := SECONDS + 1;
    
      /* ----------------------------- COUNTER ------------------------------ */
      TOTALTIME := (HOURS * 3600) + (MINUTES * 60) + SECONDS;
        
      IF TOTALTIME >= 21600 AND TOTALTIME <= 71999 THEN
        DAILY := DAILY + 1;
      ELSE
        NIGHTLY := NIGHTLY + 1;
      END IF;

      /* ---------------------------- CALCULATOR ---------------------------- */
      IF SECONDS = 60 THEN
        MINUTES := MINUTES + 1;
        SECONDS := 0;
      END IF;

      IF MINUTES = 60 THEN
        HOURS := HOURS + 1;
        MINUTES := 0;
      END IF;

      TOTAL := TOTAL + 1;
      EXIT WHEN TOTALTIME = DEPARTURETIME;
    END LOOP;
  
    SELECT FUNC.FN_CONVERTSECONDSTOTIME(TOTAL) INTO V_TOTAL FROM DUAL;
    SELECT FUNC.FN_CONVERTSECONDSTOTIME(DAILY) INTO TEMP_DAILY FROM DUAL;
    SELECT FUNC.FN_CONVERTSECONDSTOTIME(NIGHTLY) INTO TEMP_NIGHTLY FROM DUAL;

    SELECT FUNC.FN_PAYMENT(V_TYPEVEHICLE, V_TYPETICKET, TEMP_DAILY, TEMP_NIGHTLY) INTO V_PAYMENT FROM DUAL;
  END SP_TIMECALCULATOR;

                                   ----------
  
  PROCEDURE SP_TIMECALCULATOR2( V_ENTRYTIME IN VARCHAR2, V_DEPARTURETIME IN VARCHAR2, V_DAILY OUT VARCHAR2, V_NIGHTLY OUT VARCHAR2, V_TOTAL OUT VARCHAR2 )
  AS 
    /* -------------------------- VALUES IN SECONDS ------------------------- */
    TOTALTIME NUMERIC;
    ENTRYTIME NUMERIC;
    DEPARTURETIME NUMERIC;
  
    /* ------------------------------- TIME --------------------------------- */
    HOURS NUMERIC;
    MINUTES NUMERIC;
    SECONDS NUMERIC;

    /* ----------------------------- COUNTER -------------------------------- */
    DAILY NUMERIC := 0;
    NIGHTLY NUMERIC := 0;
  
    /* ---------------------- COUNTER (DAILY + NIGHLY) ---------------------- */
    TOTAL NUMERIC := 0;
    TEMP_DAILY VARCHAR2(100);
    TEMP_NIGHTLY VARCHAR2(100);
  BEGIN
    /* ----------------------- GET VALUES IN SECONDS ------------------------ */
    SELECT FUNC.FN_CONVERTTIMETOSECONDS(V_ENTRYTIME) INTO ENTRYTIME FROM DUAL;
    SELECT FUNC.FN_CONVERTTIMETOSECONDS(V_DEPARTURETIME) INTO DEPARTURETIME FROM DUAL;

    /* ------------------------------ GET TIME ------------------------------ */
    SELECT TO_NUMBER(SUBSTR(V_ENTRYTIME,0, 2)) INTO HOURS FROM DUAL;
    SELECT TO_NUMBER(SUBSTR(V_ENTRYTIME,4, 2)) INTO MINUTES FROM DUAL;
    SELECT TO_NUMBER(SUBSTR(V_ENTRYTIME,7, 2)) INTO SECONDS FROM DUAL;

    LOOP
      SECONDS := SECONDS + 1;
    
      /* ----------------------------- COUNTER ------------------------------ */
      TOTALTIME := (HOURS * 3600) + (MINUTES * 60) + SECONDS;
        
      IF TOTALTIME >= 21600 AND TOTALTIME <= 71999 THEN
        DAILY := DAILY + 1;
      ELSE
        NIGHTLY := NIGHTLY + 1;
      END IF;

      /* ---------------------------- CALCULATOR ---------------------------- */
      IF SECONDS = 60 THEN
        MINUTES := MINUTES + 1;
        SECONDS := 0;
      END IF;

      IF MINUTES = 60 THEN
        HOURS := HOURS + 1;
        MINUTES := 0;
      END IF;

      TOTAL := TOTAL + 1;
      EXIT WHEN TOTALTIME = DEPARTURETIME;
    END LOOP;
  
    V_DAILY := DAILY;
    V_NIGHTLY := NIGHTLY;
    V_TOTAL := TOTAL;
  END SP_TIMECALCULATOR2;  
    
                                   ----------
    
  PROCEDURE SP_GETVEHICLEINFO( V_ID_VEHICLE IN VARCHAR2, V_ENTRYDATE OUT VARCHAR2, V_ENTRYTIME OUT VARCHAR2, V_DEPARTUREDATE OUT VARCHAR2, V_DEPARTURETIME OUT VARCHAR2, V_STAYTIME OUT VARCHAR2, V_TYPEVEHICLE OUT VARCHAR2, V_TYPETICKET OUT VARCHAR2, V_MARGIN OUT VARCHAR2, V_ROUNDEDTIME OUT VARCHAR2, V_PAYMENT OUT VARCHAR2 )
  AS
    /* ------------------------------- TIME --------------------------------- */
    HOURS NUMERIC;
    MINUTES NUMERIC;
    SECONDS NUMERIC;

    /* ------------------------------- DATE --------------------------------- */
    DAYS NUMERIC;
    MONTHS NUMERIC;
    YEARS NUMERIC;

    /* ---------------------- LIMIT OF DAYS PER MONTH ----------------------- */
    LIMITOFDAYS NUMERIC := 0;

    /* ---------------------- COUNTER (DAILY + NIGHLY) ---------------------- */
    DAILY NUMERIC := 0;
    NIGHTLY NUMERIC := 0;
    TOTALTIME NUMERIC := 0;

    /* ---------------------------- TEMP COUNTER ---------------------------- */
    TEMP_DAILY NUMERIC := 0;
    TEMP_NIGHTLY NUMERIC := 0;
    TEMP_TOTAL NUMERIC := 0;
    TEMP_DATE VARCHAR2(100);
  BEGIN
    /* ---------- GET ENTRY DATETIME, TYPE VEHICLE AND TYPE TICKET ---------- */
    SELECT TB_V.ENTRYDATE, TB_V.ENTRYTIME, TB_TV.TYPEVEHICLE, TB_TT.TYPETICKET INTO V_ENTRYDATE, V_ENTRYTIME, V_TYPEVEHICLE, V_TYPETICKET FROM TB_VEHICLES TB_V, TB_TYPEVEHICLE TB_TV, TB_TYPETICKET TB_TT WHERE TB_V.ID_TYPEVEHICLE = TB_TV.ID_TYPE AND TB_V.ID_TYPETICKET = TB_TT.ID_TYPE AND TB_V.ID_VEHICLE = V_ID_VEHICLE;
    DBMS_OUTPUT.PUT_LINE('1');

    /* ---------------------- GET DEPARTURE DATETIME ------------------------ */
    SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY') INTO V_DEPARTUREDATE FROM DUAL;
    SELECT TO_CHAR(SYSDATE,'HH24:MI:SS') INTO V_DEPARTURETIME FROM DUAL;
    DBMS_OUTPUT.PUT_LINE('2');

    /* ---------------------------- GET MARGIN ------------------------------ */
    SELECT FREETIME INTO V_MARGIN FROM TB_CONFIGURATION;
    DBMS_OUTPUT.PUT_LINE('3');

    IF V_ENTRYDATE = V_DEPARTUREDATE THEN
      IF V_ENTRYTIME = V_DEPARTURETIME THEN
        V_STAYTIME := '00:00:00';
        V_PAYMENT := 0;
      ELSIF V_ENTRYTIME != V_DEPARTURETIME THEN
          DBMS_OUTPUT.PUT_LINE(V_ENTRYDATE);
          DBMS_OUTPUT.PUT_LINE(V_DEPARTUREDATE);
        STPR.SP_TIMECALCULATOR(V_TYPEVEHICLE, V_TYPETICKET, V_ENTRYTIME, V_DEPARTURETIME, V_STAYTIME, V_PAYMENT);
          DBMS_OUTPUT.PUT_LINE('3');
          DBMS_OUTPUT.PUT_LINE(V_ENTRYDATE);
          DBMS_OUTPUT.PUT_LINE(V_DEPARTUREDATE);
      END IF;
    ELSIF V_ENTRYDATE != V_DEPARTUREDATE THEN
          DBMS_OUTPUT.PUT_LINE('4');
      /* ----------------------------- GET TIME ----------------------------- */
      SELECT TO_NUMBER(SUBSTR(V_ENTRYTIME,0, 2)) INTO HOURS FROM DUAL;
      SELECT TO_NUMBER(SUBSTR(V_ENTRYTIME,4, 2)) INTO MINUTES FROM DUAL;
      SELECT TO_NUMBER(SUBSTR(V_ENTRYTIME,7, 2)) INTO SECONDS FROM DUAL;

      /* ----------------------------- GET DATE ----------------------------- */
      SELECT TO_NUMBER(SUBSTR(V_ENTRYDATE,0, 2)) INTO DAYS FROM DUAL;
      SELECT TO_NUMBER(SUBSTR(V_ENTRYDATE,4, 2)) INTO MONTHS FROM DUAL;
      SELECT TO_NUMBER(SUBSTR(V_ENTRYDATE,7, 4)) INTO YEARS FROM DUAL;

      /* ------------------- GET LIMIT OF DAYS PER MONTH -------------------- */
      SELECT FUNC.FN_GETLIMITOFDAYS(MONTHS, YEARS) INTO LIMITOFDAYS FROM DUAL;

      LOOP      
        SELECT FUNC.FN_GETDATEFORMAT(DAYS, MONTHS, YEARS) INTO TEMP_DATE FROM DUAL; 
      
        /* --------------------------- CALCULATOR --------------------------- */      
        IF TEMP_DATE = V_ENTRYDATE THEN
          STPR.SP_TIMECALCULATOR2( V_ENTRYTIME, '24:00:00', TEMP_DAILY, TEMP_NIGHTLY, TEMP_TOTAL);
        ELSIF TEMP_DATE != V_ENTRYDATE AND TEMP_DATE != V_DEPARTUREDATE THEN
          STPR.SP_TIMECALCULATOR2( '00:00:00', '24:00:00', TEMP_DAILY, TEMP_NIGHTLY, TEMP_TOTAL);
        ELSIF TEMP_DATE = V_DEPARTUREDATE THEN
          STPR.SP_TIMECALCULATOR2( '00:00:00', V_DEPARTURETIME, TEMP_DAILY, TEMP_NIGHTLY, TEMP_TOTAL);
        END IF;
      
        DAILY := DAILY + TEMP_DAILY;
        NIGHTLY := NIGHTLY + TEMP_NIGHTLY;
        TOTALTIME := TOTALTIME + TEMP_TOTAL;
          
        SELECT FUNC.FN_GETDATEFORMAT(DAYS, MONTHS, YEARS) INTO TEMP_DATE FROM DUAL; 
 
        /* ------------------ GET LIMIT OF DAYS PER MONTH ------------------- */
        SELECT FUNC.FN_GETLIMITOFDAYS(MONTHS, YEARS) INTO LIMITOFDAYS FROM DUAL;

        /* ---------------------------- COUNTER ----------------------------- */      
        DAYS := DAYS + 1;

        IF DAYS = (LIMITOFDAYS + 1) THEN
          MONTHS := MONTHS + 1;
          DAYS := 1;
        END IF;

        IF MONTHS = 13 THEN
          YEARS := YEARS + 1;
          MONTHS := 1;
        END IF;
              
        EXIT WHEN TEMP_DATE = V_DEPARTUREDATE;
      END LOOP;
      SELECT FUNC.FN_CONVERTSECONDSTOTIME(TOTALTIME) INTO V_STAYTIME FROM DUAL;
      SELECT FUNC.FN_PAYMENT(V_TYPEVEHICLE, V_TYPETICKET, (SELECT FUNC.FN_CONVERTSECONDSTOTIME(DAILY) FROM DUAL), (SELECT FUNC.FN_CONVERTSECONDSTOTIME(NIGHTLY) FROM DUAL)) INTO V_PAYMENT FROM DUAL;      
    END IF;
          DBMS_OUTPUT.PUT_LINE('6');
    
    SELECT TO_NUMBER(SUBSTR(FUNC.FN_CONVERTSECONDSTOTIME(TOTALTIME),0, 2)) INTO HOURS FROM DUAL;
    SELECT TO_NUMBER(SUBSTR(FUNC.FN_CONVERTSECONDSTOTIME(TOTALTIME),4, 2)) INTO MINUTES FROM DUAL;
    
    IF MINUTES > 30 THEN
      V_ROUNDEDTIME := (HOURS + 1) || '.' || 0;
    ELSIF MINUTES > V_MARGIN AND MINUTES < 30 THEN
      V_ROUNDEDTIME := HOURS || '.' || 5;
    ELSE 
      V_ROUNDEDTIME := HOURS || '.' || 0;
    END IF;    
    DBMS_OUTPUT.PUT_LINE(FUNC.FN_CONVERTSECONDSTOTIME(DAILY));
    DBMS_OUTPUT.PUT_LINE(FUNC.FN_CONVERTSECONDSTOTIME(NIGHTLY));
  END;

                                   ----------
    
  PROCEDURE SP_HISTORY(V_USERNAME IN VARCHAR2, V_DESCRIPTION IN VARCHAR2, V_DATAENTERED IN VARCHAR2)
  AS
    V_DATE VARCHAR2(10);
    V_TIME VARCHAR2(11);  
  BEGIN
    SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY') INTO V_DATE FROM DUAL; 
    SELECT LOWER(TO_CHAR(SYSDATE,'HH:MI:SS AM')) INTO V_TIME FROM DUAL;
    
    INSERT INTO TB_HISTORY VALUES (SEQ_TB_HISTORY.NEXTVAL, V_USERNAME, V_DESCRIPTION, V_DATAENTERED, V_DATE, V_TIME);  
  END SP_HISTORY;
END STPR;

---------------------------------- COMMIT --------------------------------------

COMMIT;