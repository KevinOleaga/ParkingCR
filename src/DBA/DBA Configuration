SET VERIFY OFF;
SET DATEFORMAT DMY;
SET SERVEROUTPUT ON; 

------------------------------------ TABLES ------------------------------------

CREATE TABLE TB_ROLES(
         ID_ROLE NUMERIC(1) NOT NULL,
       USER_ROLE VARCHAR2(25) NOT NULL,
    
      CONSTRAINT TB_ROLES_PK
     PRIMARY KEY (ID_ROLE)
);

CREATE TABLE TB_USERS(
        USERNAME VARCHAR2(50) NOT NULL,
            PASS VARCHAR2(50) NOT NULL,
         ID_ROLE NUMERIC(1) NOT NULL,
      FIRST_NAME VARCHAR2(50) NOT NULL,
       LAST_NAME VARCHAR2(50) NOT NULL,
   
      CONSTRAINT TB_USERS_PK
     PRIMARY KEY (USERNAME),
  
      CONSTRAINT TB_USERS_TB_ROLES_FK
     FOREIGN KEY (ID_ROLE)
      REFERENCES TB_ROLES(ID_ROLE) 
);

CREATE TABLE TB_TYPETICKET(
         ID_TYPE NUMERIC(1) NOT NULL,
      TYPETICKET VARCHAR2(25) NOT NULL,

      CONSTRAINT PK_TYPETICKET
     PRIMARY KEY (ID_TYPE)
);

CREATE TABLE TB_TYPEVEHICLE(
         ID_TYPE NUMERIC(1) NOT NULL,
     TYPEVEHICLE VARCHAR2(25) NOT NULL,
      DAILY_RENT NUMERIC(10) NOT NULL,
    NIGHTLY_RENT NUMERIC(10) NOT NULL,
       DAY_PRICE NUMERIC(10) NOT NULL,
     NIGHT_PRICE NUMERIC(10) NOT NULL,

      CONSTRAINT PK_TYPEVEHICLE
     PRIMARY KEY (ID_TYPE)
);

CREATE TABLE TB_PARTNERS(
      ID_VEHICLE VARCHAR2(50) NOT NULL,
  
      CONSTRAINT TB_PARTNERS_PK
     PRIMARY KEY (ID_VEHICLE)
);

CREATE TABLE TB_BLACKLIST(
      ID_VEHICLE VARCHAR2(50) NOT NULL,
  
      CONSTRAINT TB_BLACKLIST_PK
     PRIMARY KEY (ID_VEHICLE)
);

CREATE TABLE TB_VEHICLES(
      ID_VEHICLE VARCHAR2(50) NOT NULL,
  ID_TYPEVEHICLE NUMERIC(1) NOT NULL,
   ID_TYPETICKET NUMERIC(1) NOT NULL,
       ENTRYDATE VARCHAR2(10) NOT NULL,
       ENTRYTIME VARCHAR2(8) NOT NULL,
        USERNAME VARCHAR2(50) NOT NULL,
  
      CONSTRAINT PK_ID_VEHICLE
     PRIMARY KEY (ID_VEHICLE),

      CONSTRAINT FK_ID_TYPEVEHICLE
     FOREIGN KEY (ID_TYPEVEHICLE)
      REFERENCES TB_TYPEVEHICLE(ID_TYPE),

      CONSTRAINT FK_ID_TYPETICKET
     FOREIGN KEY (ID_TYPETICKET)
      REFERENCES TB_TYPETICKET(ID_TYPE),
    	
      CONSTRAINT FK_USERNAME
     FOREIGN KEY (USERNAME)
      REFERENCES TB_USERS(USERNAME)
);

CREATE TABLE TB_CONFIGURATION(
      ID_PARKING VARCHAR2(100) NOT NULL,
    PARKING_NAME VARCHAR2(100) NOT NULL,
       TELEPHONE VARCHAR2(50) NOT NULL,
        FREETIME NUMERIC(5) NOT NULL,
     START_DAILY VARCHAR2(8) NOT NULL,
       END_DAILY VARCHAR2(8) NOT NULL,
   START_NIGHTLY VARCHAR2(8) NOT NULL,
     END_NIGHTLY VARCHAR2(8) NOT NULL,   
    
      CONSTRAINT PK_ID_PARKING
     PRIMARY KEY (ID_PARKING)
);

CREATE TABLE TB_HISTORY(
      ID_HISTORY NUMBER NOT NULL,
        USERNAME VARCHAR2(50) NOT NULL,
     DESCRIPTION VARCHAR2(500) NOT NULL,
     DATAENTERED VARCHAR2(100) DEFAULT 'NO APLICA' NOT NULL,
          V_DATE VARCHAR2(10) NOT NULL,
          V_TIME VARCHAR2(11) NOT NULL,

      CONSTRAINT TB_HISTORY_PK
     PRIMARY KEY (ID_HISTORY)
);

----------------------------------- SEQUENCE -----------------------------------

CREATE SEQUENCE SEQ_TB_HISTORY
INCREMENT BY 1
START WITH 1
NOMINVALUE
NOMAXVALUE;

----------------------------------- INSERTS ------------------------------------

INSERT INTO TB_ROLES VALUES (1,'XAaN4xw4eNjH+xWMPcJ2wQ==');
INSERT INTO TB_ROLES VALUES (2,'jcHsEraTfgc=');
INSERT INTO TB_ROLES VALUES (2,'jcHsEraTfgc=');

INSERT INTO TB_USERS VALUES ('5P3iSFsr24E=','5P3iSFsr24E=',1,'5P3iSFsr24E=','5P3iSFsr24E=');
INSERT INTO TB_USERS VALUES ('SES9L+QysE8=','SES9L+QysE8=',2,'SES9L+QysE8=','SES9L+QysE8=');

INSERT INTO TB_TYPEVEHICLE VALUES (1,'8y1NZGLw2Wk=',6000,4000,1200,800);
INSERT INTO TB_TYPEVEHICLE VALUES (2,'9WRBRgEw67DJ2NYA2Yho7Q==',5000,3000,900,600);
INSERT INTO TB_TYPEVEHICLE VALUES (3,'5BGlEnERcMADx1/7qa9TyQ==',2500,2000,500,400);

INSERT INTO TB_TYPETICKET VALUES (1,'IACjaJvExRcD59aadV3geg==');
INSERT INTO TB_TYPETICKET VALUES (2,'rCBeANzrknzjAvSBLXDW0w==');
INSERT INTO TB_TYPETICKET VALUES (3,'fSZAZ5Ui1Wg=');

---------------------------- PACKAGES -> FUNCTIONS -----------------------------

CREATE OR REPLACE PACKAGE FUNC
AS
  FUNCTION FN_LOGIN01(V_USER IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_LOGIN02(V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_GETROLE(V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_COUNTTRUCKS RETURN NUMERIC;
  FUNCTION FN_COUNTCARS RETURN NUMERIC;
  FUNCTION FN_COUNTMOTORCYCLES RETURN NUMERIC;
  FUNCTION FN_COUNTUSERS RETURN NUMERIC;
  FUNCTION FN_COUNTPARTNERS RETURN NUMERIC;
  FUNCTION FN_COUNTBLACKLIST RETURN NUMERIC;
  FUNCTION FN_COUNTVEHICLES RETURN NUMERIC;
  FUNCTION FN_GETPLATESTATUS(V_ID IN VARCHAR2) RETURN VARCHAR2;
END FUNC;

CREATE OR REPLACE PACKAGE BODY FUNC
AS
  FUNCTION FN_LOGIN01(V_USER IN VARCHAR2)
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_USERS WHERE USERNAME IN (V_USER);
    RETURN EXIST;
  END FN_LOGIN01;  
                                   ----------

  FUNCTION FN_LOGIN02( V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2 )
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_USERS WHERE USERNAME IN (V_USER) AND PASS IN (V_PASSWORD);
    RETURN EXIST;
  END FN_LOGIN02;
  
                                   ----------
  
  FUNCTION FN_GETROLE( V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2 )
  RETURN NUMERIC
  AS
    ID_ROLE NUMERIC(1);
  BEGIN
    SELECT ID_ROLE INTO ID_ROLE FROM TB_USERS WHERE USERNAME IN (V_USER) AND PASS IN (V_PASSWORD);
    RETURN ID_ROLE;
  END FN_GETROLE;

                                   ----------

  FUNCTION FN_COUNTTRUCKS
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPE AND TV.TYPEVEHICLE = '8y1NZGLw2Wk=';
    RETURN RES;
  END FN_COUNTTRUCKS;

                                   ----------
  FUNCTION FN_COUNTCARS
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPE AND TV.TYPEVEHICLE = '9WRBRgEw67DJ2NYA2Yho7Q==';
    RETURN RES;
  END FN_COUNTCARS;
  
                                   ----------
    
  FUNCTION FN_COUNTMOTORCYCLES
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPE AND TV.TYPEVEHICLE = '5BGlEnERcMADx1/7qa9TyQ==';
    RETURN RES;
  END FN_COUNTMOTORCYCLES;
  
                                   ----------
    
  FUNCTION FN_COUNTUSERS
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_USERS;
    RETURN RES;
  END FN_COUNTUSERS;
  
                                   ----------
    
  FUNCTION FN_COUNTPARTNERS
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_PARTNERS;
    RETURN RES;
  END FN_COUNTPARTNERS;
    
                                   ----------
    
  FUNCTION FN_COUNTBLACKLIST
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_BLACKLIST;
    RETURN RES;
  END FN_COUNTBLACKLIST;
  
                                   ----------
    
  FUNCTION FN_COUNTVEHICLES
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_VEHICLES;
    RETURN RES;
  END FN_COUNTVEHICLES;

                                   ----------
    
  FUNCTION FN_GETPLATESTATUS(V_ID IN VARCHAR2)
  RETURN VARCHAR2
  AS
    EXIST NUMERIC(1);
    ISLOCKED NUMERIC(1);
    ISPARTNER NUMERIC(1);
    STATUS VARCHAR2(7);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_VEHICLES WHERE ID_VEHICLE = V_ID;
    SELECT COUNT(*) INTO ISLOCKED FROM TB_BLACKLIST WHERE ID_VEHICLE = V_ID;
    SELECT COUNT(*) INTO ISPARTNER FROM TB_PARTNERS WHERE ID_VEHICLE = V_ID;
       
    IF EXIST = 1 THEN    
      STATUS := 'EXIST';
    ELSIF ISLOCKED = 1 THEN
      STATUS := 'LOCKED';
    ELSIF ISPARTNER = 1 THEN
      STATUS := 'PARTNER';
    ELSIF EXIST = 0 AND ISLOCKED = 0 AND ISPARTNER = 0 THEN
      STATUS := 'OK';
    END IF;    
    RETURN STATUS;
  END FN_GETPLATESTATUS;  
END FUNC;

------------------------ PACKAGES -> STORED PROCEDURES -------------------------

CREATE OR REPLACE PACKAGE STPR
AS  
  PROCEDURE SP_NEWVEHICLE(V_ID_VEHICLE IN VARCHAR2, V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DATE IN VARCHAR2, V_TIME IN VARCHAR2, V_USERNAME IN VARCHAR2, STATUS OUT VARCHAR2);
  PROCEDURE SP_HISTORY(V_USERNAME IN VARCHAR2, V_DESCRIPTION IN VARCHAR2, V_DATAENTERED IN VARCHAR2);
  PROCEDURE SP_GetWidgetsInfo(V_USERS OUT NUMERIC, V_PARTNERS OUT NUMERIC, V_BLACKLIST OUT NUMERIC, V_VEHICLES OUT NUMERIC);
END STPR;

CREATE OR REPLACE PACKAGE BODY STPR
AS
  PROCEDURE SP_NEWVEHICLE(V_ID_VEHICLE IN VARCHAR2, V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DATE IN VARCHAR2, V_TIME IN VARCHAR2, V_USERNAME IN VARCHAR2, STATUS OUT VARCHAR2)
  AS
  BEGIN
      SELECT FUNC.FN_GETPLATESTATUS(V_ID_VEHICLE) INTO STATUS FROM DUAL; 
      IF STATUS = 'PARTNER' THEN 
        INSERT INTO TB_VEHICLES VALUES (V_ID_VEHICLE, (SELECT ID_TYPE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = V_TYPEVEHICLE), (SELECT ID_TYPE FROM TB_TYPETICKET WHERE TYPETICKET = 'fSZAZ5Ui1Wg='), V_DATE, V_TIME, V_USERNAME);  
      ELSIF STATUS = 'OK' THEN
        INSERT INTO TB_VEHICLES VALUES (V_ID_VEHICLE, (SELECT ID_TYPE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = V_TYPEVEHICLE), (SELECT ID_TYPE FROM TB_TYPETICKET WHERE TYPETICKET = V_TYPETICKET), V_DATE, V_TIME, V_USERNAME);  
      END IF;
  END SP_NEWVEHICLE;

                                   ----------
    
  PROCEDURE SP_HISTORY(V_USERNAME IN VARCHAR2, V_DESCRIPTION IN VARCHAR2, V_DATAENTERED IN VARCHAR2)
  AS
    V_DATE VARCHAR2(10);
    V_TIME VARCHAR2(11);  
  BEGIN
    SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY') INTO V_DATE FROM DUAL; 
    SELECT LOWER(TO_CHAR(SYSDATE,'HH:MI:SS AM')) INTO V_TIME FROM DUAL;
    
    INSERT INTO TB_HISTORY VALUES (SEQ_TB_HISTORY.NEXTVAL, V_USERNAME, V_DESCRIPTION, V_DATAENTERED, V_DATE, V_TIME);  
  END SP_HISTORY;

                                   ----------
    
  PROCEDURE SP_GetWidgetsInfo(V_USERS OUT NUMERIC, V_PARTNERS OUT NUMERIC, V_BLACKLIST OUT NUMERIC, V_VEHICLES OUT NUMERIC)
  AS
  BEGIN
      SELECT COUNT(*) INTO V_USERS FROM TB_USERS; 
      SELECT COUNT(*) INTO V_PARTNERS FROM TB_PARTNERS; 
      SELECT COUNT(*) INTO V_BLACKLIST FROM TB_BLACKLIST; 
      SELECT COUNT(*) INTO V_VEHICLES FROM TB_VEHICLES; 
  END SP_GetWidgetsInfo;
END STPR;


SELECT * FROM TB_HISTORY

