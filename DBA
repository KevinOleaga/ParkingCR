SET VERIFY OFF;
SET DATEFORMAT DMY;
SET SERVEROUTPUT ON; 

--------------------------------------------------------------------------------  TABLES

CREATE TABLE TB_ROLES(
     ID_ROLE NUMERIC(1) NOT NULL,
   USER_ROLE VARCHAR2(30) NOT NULL,

  CONSTRAINT TB_ROLES_PK
 PRIMARY KEY (ID_ROLE)
);

CREATE TABLE TB_USERS(
    USERNAME VARCHAR2(30) NOT NULL,
        PASS VARCHAR2(30) NOT NULL,
     ID_ROLE NUMERIC(1) NOT NULL,
  FIRST_NAME VARCHAR2(30) NOT NULL,
   LAST_NAME VARCHAR2(30) NOT NULL,
   
  CONSTRAINT TB_USERS_PK
 PRIMARY KEY (USERNAME),
  
  CONSTRAINT TB_USERS_TB_ROLES_FK
 FOREIGN KEY (ID_ROLE)
  REFERENCES TB_ROLES(ID_ROLE) 
);

CREATE TABLE TB_PARTNERS(
  ID_VEHICLE VARCHAR2(8) NOT NULL,
  
  CONSTRAINT TB_PARTNERS_PK
 PRIMARY KEY (ID_VEHICLE)
);

CREATE TABLE TB_BLACKLIST(
  ID_VEHICLE VARCHAR2(8) NOT NULL,
  REASON VARCHAR2(100) DEFAULT 'SIN DETALLE' NOT NULL,
  
  CONSTRAINT TB_BLACKLIST_PK
 PRIMARY KEY (ID_VEHICLE)
);

CREATE TABLE TB_TYPEVEHICLE(
	ID_TYPEVEHICLE NUMERIC(1) NOT NULL,
   	 TYPEVEHICLE VARCHAR2(11) NOT NULL,
       DAILYRENT NUMERIC(10) NOT NULL,
     NIGHTLYRENT NUMERIC(10) NOT NULL,
         DAYRENT NUMERIC(10) NOT NULL,
       NIGHTRENT NUMERIC(10) NOT NULL,

      CONSTRAINT PK_ID_TYPEVEHICLE
	   PRIMARY KEY (ID_TYPEVEHICLE)
);

CREATE TABLE TB_TYPETICKET(
	ID_TYPETICKET NUMERIC(1) NOT NULL,
	   TYPETICKET VARCHAR2(12) NOT NULL,

	   CONSTRAINT PK_ID_TYPETICKET
	  PRIMARY KEY (ID_TYPETICKET)
);

CREATE TABLE TB_VEHICLES(
	    ID_VEHICLE VARCHAR2(15) NOT NULL,
  ID_TYPEVEHICLE NUMERIC(1) NOT NULL,
   ID_TYPETICKET NUMERIC(1) NOT NULL,
       ENTRYDATE VARCHAR2(10) NOT NULL,
       ENTRYTIME VARCHAR2(8) NOT NULL,
        USERNAME VARCHAR2(30) NOT NULL,
  
	    CONSTRAINT PK_ID_VEHICLE
	   PRIMARY KEY (ID_VEHICLE),

	    CONSTRAINT FK_ID_TYPEVEHICLE
	   FOREIGN KEY (ID_TYPEVEHICLE)
	    REFERENCES TB_TYPEVEHICLE(ID_TYPEVEHICLE),

    	CONSTRAINT FK_ID_TYPETICKET
	   FOREIGN KEY (ID_TYPETICKET)
      REFERENCES TB_TYPETICKET(ID_TYPETICKET),
    	
      CONSTRAINT FK_USERNAME
	   FOREIGN KEY (USERNAME)
      REFERENCES TB_USERS(USERNAME)
);

CREATE TABLE TB_CONFIGURATION(
     ID_PARKING VARCHAR2(12) NOT NULL,
   PARKING_NAME VARCHAR2(24) NOT NULL,
 	    TELEPHONE VARCHAR2(9) NOT NULL,
       FREETIME NUMERIC(5) NOT NULL,
    START_DAYLY VARCHAR2(8) NOT NULL,   
      END_DAYLY VARCHAR2(8) NOT NULL,   
  START_NIGHTLY VARCHAR2(8) NOT NULL,
    END_NIGHTLY VARCHAR2(8) NOT NULL,   
    
    CONSTRAINT PK_ID_PARKING
   PRIMARY KEY (ID_PARKING)
);

--------------------------------------------------------------------------------  INSERTS

INSERT INTO TB_ROLES VALUES (1,'ADMINISTRADOR');
INSERT INTO TB_ROLES VALUES (2,'USUARIO');

INSERT INTO TB_USERS VALUES ('ADMIN','ADMIN',1,'MY FIRST NAME','MY LAST NAME');
INSERT INTO TB_USERS VALUES ('USER','USER',2,'MY FIRST NAME','MY LAST NAME');

INSERT INTO TB_TYPEVEHICLE VALUES (1,'CAMIÓN','6000','4000','1200','800');
INSERT INTO TB_TYPEVEHICLE VALUES (2,'AUTOMÓVIL','5000','3000','900','600');
INSERT INTO TB_TYPEVEHICLE VALUES (3,'MOTOCICLETA','2500','2000','500','400');

INSERT INTO TB_TYPETICKET VALUES (1,'CASUAL');
INSERT INTO TB_TYPETICKET VALUES (2,'RENTA DIARIA');
INSERT INTO TB_TYPETICKET VALUES (3,'SOCIO');

INSERT INTO TB_CONFIGURATION VALUES ('3-101-999999','Parqueo Chalit LyF S.A.','2221-7413','5','06:00:00','20:00:00','20:00:01','05:59:59');

--------------------------------------------------------------------------------  VIEWS

CREATE OR REPLACE VIEW VI_GETVEHICLES AS SELECT UPPER(V.ID_VEHICLE) "Placa", INITCAP(TV.TYPEVEHICLE) "Tipo de vehiculo", INITCAP(TT.TYPETICKET) "Tipo de cliente", V.ENTRYDATE "Fecha de entrada", V.ENTRYTIME "Hora de entrada" 
                                         FROM TB_VEHICLES V, TB_TYPEVEHICLE TV, TB_TYPETICKET TT
                                         WHERE V.ID_TYPEVEHICLE = TV.ID_TYPEVEHICLE AND V.ID_TYPETICKET = TT.ID_TYPETICKET
                                         ORDER BY 4,5;

--------------------------------------------------------------------------------  PACKAGES -> FUNCTIONS

CREATE OR REPLACE PACKAGE FUNC
AS
  FUNCTION FN_LOGIN01(V_USER IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_LOGIN02(V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_GETROLE(V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_COUNTTRUCKS RETURN NUMERIC;
  FUNCTION FN_COUNTCARS RETURN NUMERIC;
  FUNCTION FN_COUNTMOTORCYCLES RETURN NUMERIC;
  FUNCTION FN_GET_ID_TYPETICKET (V_TYPETICKET IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_GET_ID_TYPEVEHICLE (V_TYPEVEHICLE IN VARCHAR2) RETURN NUMERIC;
  FUNCTION FN_GET_DAILYPRICE ( V_TYPEVEHICLE IN VARCHAR2 ) RETURN NUMERIC;
  FUNCTION FN_GET_NIGHTLYPRICE ( V_TYPEVEHICLE IN VARCHAR2 ) RETURN NUMERIC;
  FUNCTION FN_GETPLATESTATUS(V_ID_VEHICLE IN VARCHAR2) RETURN VARCHAR2;
END FUNC;
  
CREATE OR REPLACE PACKAGE BODY FUNC
AS
  FUNCTION FN_LOGIN01(V_USER IN VARCHAR2)
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_USERS WHERE USERNAME IN (UPPER(V_USER));
    RETURN EXIST;
  END FN_LOGIN01;  
                                   ----------
  
  FUNCTION FN_LOGIN02( V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2 )
  RETURN NUMERIC
  AS
    EXIST NUMERIC(1);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_USERS WHERE USERNAME IN (UPPER(V_USER)) AND PASS IN (UPPER(V_PASSWORD));
    RETURN EXIST;
  END FN_LOGIN02;
  
                                   ----------
  
  FUNCTION FN_GETROLE( V_USER IN VARCHAR2, V_PASSWORD IN VARCHAR2 )
  RETURN NUMERIC
  AS
    ID_ROLE NUMERIC(1);
  BEGIN
    SELECT ID_ROLE INTO ID_ROLE FROM TB_USERS WHERE USERNAME IN (UPPER(V_USER)) AND PASS IN (UPPER(V_PASSWORD));
    RETURN ID_ROLE;
  END FN_GETROLE;

                                   ----------
    
  FUNCTION FN_COUNTTRUCKS
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPEVEHICLE AND TV.TYPEVEHICLE = 'CAMIÓN';
    RETURN RES;
  END FN_COUNTTRUCKS;

                                   ----------
  FUNCTION FN_COUNTCARS
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPEVEHICLE AND TV.TYPEVEHICLE = 'AUTOMÓVIL';
    RETURN RES;
  END FN_COUNTCARS;
  
                                   ----------
    
  FUNCTION FN_COUNTMOTORCYCLES
  RETURN NUMERIC
  AS
    RES NUMERIC(3);
  BEGIN
    SELECT COUNT(*) INTO RES FROM TB_VEHICLES V, TB_TYPEVEHICLE TV WHERE V.ID_TYPEVEHICLE = TV.ID_TYPEVEHICLE AND TV.TYPEVEHICLE = 'MOTOCICLETA';
    RETURN RES;
  END FN_COUNTMOTORCYCLES;
  
                                   ----------
    
  FUNCTION FN_GET_ID_TYPETICKET ( V_TYPETICKET IN VARCHAR2 )
  RETURN NUMERIC
  AS
    V_ID NUMERIC(1);
  BEGIN
    SELECT ID_TYPETICKET INTO V_ID FROM TB_TYPETICKET WHERE TYPETICKET = UPPER(V_TYPETICKET);
    RETURN V_ID;
  END FN_GET_ID_TYPETICKET;
  
                                   ----------
    
  FUNCTION FN_GET_ID_TYPEVEHICLE ( V_TYPEVEHICLE IN VARCHAR2 )
  RETURN NUMERIC
  AS
    V_ID NUMERIC(1);
  BEGIN
    SELECT ID_TYPEVEHICLE INTO V_ID FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = UPPER(V_TYPEVEHICLE);
    RETURN V_ID;
  END FN_GET_ID_TYPEVEHICLE;
  
                                   ----------
    
  FUNCTION FN_GET_DAILYPRICE ( V_TYPEVEHICLE IN VARCHAR2 )
  RETURN NUMERIC
  AS
    V_PRICE NUMERIC(10);
  BEGIN
    SELECT DAILYRENT INTO V_PRICE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = UPPER(V_TYPEVEHICLE);
    RETURN V_PRICE;
  END FN_GET_DAILYPRICE;
  
                                   ----------
    
  FUNCTION FN_GET_NIGHTLYPRICE ( V_TYPEVEHICLE IN VARCHAR2 )
  RETURN NUMERIC
  AS
    V_PRICE NUMERIC(10);
  BEGIN
    SELECT NIGHTLYRENT INTO V_PRICE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = UPPER(V_TYPEVEHICLE);
    RETURN V_PRICE;
  END FN_GET_NIGHTLYPRICE;

                                   ----------
    
  FUNCTION FN_GETPLATESTATUS(V_ID_VEHICLE IN VARCHAR2)
  RETURN VARCHAR2
  AS
    EXIST NUMERIC(1);
    ISLOOCKED NUMERIC(1);
    ISPARTNER NUMERIC(1);
    STATUS VARCHAR2(7);
  BEGIN
    SELECT COUNT(*) INTO EXIST FROM TB_VEHICLES WHERE ID_VEHICLE = UPPER(V_ID_VEHICLE);
    SELECT COUNT(*) INTO ISLOOCKED FROM TB_BLACKLIST WHERE ID_VEHICLE = UPPER(V_ID_VEHICLE);
    SELECT COUNT(*) INTO ISPARTNER FROM TB_PARTNERS WHERE ID_VEHICLE = UPPER(V_ID_VEHICLE);
       
    IF EXIST = 1 THEN    
      STATUS := 'EXIST';
    ELSIF ISLOOCKED = 1 THEN
      STATUS := 'LOOCKED';
    ELSIF ISPARTNER = 1 THEN
      STATUS := 'PARTNER';
    ELSIF EXIST = 0 AND ISLOOCKED = 0 AND ISPARTNER = 0 THEN
      STATUS := 'OK';
    END IF;    
    RETURN STATUS;
  END FN_GETPLATESTATUS;  
END FUNC;

--------------------------------------------------------------------------------  PACKAGES -> STORED PROCEDURES

CREATE OR REPLACE PACKAGE STPR
AS  
  PROCEDURE SP_NEWVEHICLE(V_ID_VEHICLE IN VARCHAR2, V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DATE IN VARCHAR2, V_TIME IN VARCHAR2, V_USERNAME IN VARCHAR2, STATUS OUT VARCHAR2);
  PROCEDURE SP_GET_CONFIGTICKET(V_ID_PARKING OUT VARCHAR2, V_PARKING_NAME OUT VARCHAR2, V_TELEPHONE OUT VARCHAR2);
END STPR;
  
CREATE OR REPLACE PACKAGE BODY STPR
AS
  PROCEDURE SP_NEWVEHICLE(V_ID_VEHICLE IN VARCHAR2, V_TYPEVEHICLE IN VARCHAR2, V_TYPETICKET IN VARCHAR2, V_DATE IN VARCHAR2, V_TIME IN VARCHAR2, V_USERNAME IN VARCHAR2, STATUS OUT VARCHAR2)
  AS
  BEGIN
      SELECT FUNC.FN_GETPLATESTATUS(V_ID_VEHICLE) INTO STATUS FROM DUAL; 
      IF STATUS = 'PARTNER' THEN 
        INSERT INTO TB_VEHICLES VALUES (V_ID_VEHICLE, (SELECT ID_TYPEVEHICLE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = UPPER(V_TYPEVEHICLE)), (SELECT ID_TYPETICKET FROM TB_TYPETICKET WHERE TYPETICKET = 'SOCIO'), V_DATE, V_TIME, V_USERNAME);  
      ELSIF STATUS = 'OK' THEN
        INSERT INTO TB_VEHICLES VALUES (V_ID_VEHICLE, (SELECT ID_TYPEVEHICLE FROM TB_TYPEVEHICLE WHERE TYPEVEHICLE = UPPER(V_TYPEVEHICLE)), (SELECT ID_TYPETICKET FROM TB_TYPETICKET WHERE TYPETICKET = UPPER(V_TYPETICKET)), V_DATE, V_TIME, V_USERNAME);  
      END IF;
  END SP_NEWVEHICLE;

                                   ----------
      
  PROCEDURE SP_GET_CONFIGTICKET(V_ID_PARKING OUT VARCHAR2, V_PARKING_NAME OUT VARCHAR2, V_TELEPHONE OUT VARCHAR2)
  AS
  BEGIN
      SELECT ID_PARKING, PARKING_NAME, TELEPHONE INTO V_ID_PARKING, V_PARKING_NAME, V_TELEPHONE FROM TB_CONFIGURATION; 
  END SP_GET_CONFIGTICKET;
END STPR;

--------------------------------------------------------------------------------  COMMIT

COMMIT;
